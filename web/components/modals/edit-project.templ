package modals

import "github.com/oar-cd/oar/web/components/forms"
import "github.com/oar-cd/oar/web/components/project"

// EditProjectModal renders the edit project modal
templ EditProjectModal(proj project.ProjectView) {
	@BaseModal("Edit Project", editProjectBody(proj), editProjectFooter(proj))
}

// editProjectBody renders the modal body content
templ editProjectBody(proj project.ProjectView) {
	@forms.ProjectForm(forms.ProjectFormData{
		IsEdit:          true,
		ProjectID:       proj.ID.String(),
		Name:            proj.Name,
		GitURL:          proj.GitURL,
		GitBranch:       proj.GitBranch,
		AuthMethod:      getAuthMethodFromProject(proj),
		Username:        getUsernameFromProject(proj),
		Password:        getPasswordFromProject(proj),
		PrivateKey:      getPrivateKeyFromProject(proj),
		ComposeFiles:    joinStringSlice(proj.ComposeFiles, "\n"),
		ComposeOverride: getComposeOverrideFromProject(proj),
		Variables:       joinStringSlice(proj.Variables, "\n"),
		WatcherEnabled:  proj.WatcherEnabled,
	})
}

// editProjectFooter renders the modal footer with action buttons
templ editProjectFooter(proj project.ProjectView) {
	@FormFooter("Update Project")
}

// Helper functions to extract auth data from project
func getAuthMethodFromProject(proj project.ProjectView) string {
	if proj.GitAuth == nil {
		return "none"
	}
	if proj.GitAuth.HTTPAuth != nil {
		return "http"
	}
	if proj.GitAuth.SSHAuth != nil {
		return "ssh"
	}
	return "none"
}

func getUsernameFromProject(proj project.ProjectView) string {
	if proj.GitAuth == nil {
		return ""
	}
	if proj.GitAuth.HTTPAuth != nil {
		return proj.GitAuth.HTTPAuth.Username
	}
	if proj.GitAuth.SSHAuth != nil {
		return proj.GitAuth.SSHAuth.User
	}
	return ""
}

func getPasswordFromProject(proj project.ProjectView) string {
	if proj.GitAuth == nil || proj.GitAuth.HTTPAuth == nil {
		return ""
	}
	return proj.GitAuth.HTTPAuth.Password
}

func getPrivateKeyFromProject(proj project.ProjectView) string {
	if proj.GitAuth == nil || proj.GitAuth.SSHAuth == nil {
		return ""
	}
	return proj.GitAuth.SSHAuth.PrivateKey
}

func getComposeOverrideFromProject(proj project.ProjectView) string {
	if proj.ComposeOverride == nil {
		return ""
	}
	return *proj.ComposeOverride
}

func joinStringSlice(slice []string, separator string) string {
	if len(slice) == 0 {
		return ""
	}
	result := ""
	for i, item := range slice {
		if i > 0 {
			result += separator
		}
		result += item
	}
	return result
}
