package project

import (
	"fmt"
	"github.com/oar-cd/oar/web/components/icons"
	"strings"
)

// ProjectCard renders an individual project card with all details and actions
templ ProjectCard(project ProjectView) {
	<div class="project-card">
		<!-- Status pill and watcher indicator positioned in top-right corner -->
		<div class="project-status">
			<div class="flex items-center gap-1">
				@StatusPill(project.ID.String(), project.Status)
				<div class="watcher-indicator flex items-center">
					if project.WatcherEnabled {
						<div title="Automatic deployment enabled" class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
							@icons.Eye("icon-sm")
						</div>
					} else {
						<div title="Automatic deployment disabled" class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800">
							@icons.EyeOff("icon-sm")
						</div>
					}
				</div>
			</div>
		</div>

		<div class="project-card-header">
			<div class="flex-1">
				<!-- Project name as prominent heading -->
				<h3 class="project-name">{ project.Name }</h3>

				<!-- Git URL as clickable link (truncated if >50 chars) -->
				<a
					href={ templ.URL(project.GitURL) }
					target="_blank"
					rel="noopener noreferrer"
					class="project-url"
					title={ project.GitURL }
				>
					{ truncateURL(project.GitURL, 50) }
				</a>

				<!-- Git branch displayed under the URL -->
				<div class="project-branch">
					{ project.GitBranch }
				</div>

				<!-- Git commit SHA (8 chars) positioned under the branch -->
				if project.LocalCommit != nil {
					<div class="project-commit">
						{ shortCommit(*project.LocalCommit) }
					</div>
				}
			</div>
		</div>

		<!-- Action buttons in link-style with proper spacing -->
		<div class="project-actions">
			@ActionButton("deploy", "Deploy", "rocket", "btn-link-primary", fmt.Sprintf("/projects/%s/deploy", project.ID.String()))
			@ActionButton("stop", "Stop", "circle-stop", "btn-link-warning", fmt.Sprintf("/projects/%s/stop", project.ID.String()))
			@ActionButton("edit", "Edit", "square-pen", "btn-link", fmt.Sprintf("/projects/%s/edit", project.ID.String()))
			@ActionButton("deployments", "Deployments", "list-checks", "btn-link", fmt.Sprintf("/projects/%s/deployments", project.ID.String()))
			@ActionButton("logs", "Logs", "scroll-text", "btn-link", fmt.Sprintf("/projects/%s/logs", project.ID.String()))
			@ActionButton("config", "Configuration", "settings", "btn-link", fmt.Sprintf("/projects/%s/config", project.ID.String()))
			@ActionButton("delete", "Delete", "trash-2", "btn-link-danger", fmt.Sprintf("/projects/%s/delete", project.ID.String()))
		</div>
	</div>
}

// StatusPill renders the status indicator with unique ID for HTMX updates
templ StatusPill(projectID, status string) {
	<span
		id={ fmt.Sprintf("status-pill-%s", projectID) }
		class={ fmt.Sprintf("status-pill %s", getStatusClass(status)) }
	>
		{ getStatusText(status) }
	</span>
}

// ActionButton renders a clickable action button with icon
templ ActionButton(action, label, iconName, buttonClass, url string) {
	<button
		type="button"
		class={ fmt.Sprintf("action-button %s", buttonClass) }
		hx-get={ url }
		hx-target="#modal-container"
		hx-swap="outerHTML"
		title={ label }
	>
		@icons.Icon(iconName, "icon-sm")
		<span>{ label }</span>
	</button>
}

// ActionButtonDisabled renders a disabled action button
templ ActionButtonDisabled(action, label, iconName string) {
	<button
		type="button"
		class="action-button btn-link opacity-50 cursor-not-allowed"
		disabled
		title={ fmt.Sprintf("%s (coming soon)", label) }
	>
		@icons.Icon(iconName, "icon-sm")
		<span>{ label }</span>
	</button>
}

// Helper functions for URL truncation and commit shortening
func truncateURL(url string, maxLength int) string {
	if len(url) <= maxLength {
		return url
	}
	return url[:maxLength-3] + "..."
}

func shortCommit(commit string) string {
	if len(commit) > 8 {
		return commit[:8]
	}
	return commit
}

func getStatusClass(status string) string {
	switch strings.ToLower(status) {
	case "running":
		return "status-running"
	case "stopped":
		return "status-stopped"
	case "error":
		return "status-error"
	default:
		return "status-stopped"
	}
}

func getStatusText(status string) string {
	switch strings.ToLower(status) {
	case "running":
		return "running"
	case "stopped":
		return "stopped"
	case "error":
		return "error"
	default:
		return "unknown"
	}
}
